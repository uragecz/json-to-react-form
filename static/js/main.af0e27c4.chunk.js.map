{"version":3,"sources":["../../src/helpers.tsx","../../src/components/formComponents/Title.tsx","../../src/components/form/FormInput.tsx","../../src/inputHelpers.tsx","../../src/components/form/FormLayout.tsx","../../src/components/formComponents/ErrorContainer.tsx","../../src/components/formComponents/TextInput.tsx","../../src/components/HtmlParser.tsx","../../src/components/form/Form.tsx","../../src/components/formComponents/SelectInput.tsx","../../src/components/formComponents/Checkbox.tsx","../../src/components/formComponents/Button.tsx","../../src/components/formComponents/TextArea.tsx","../../src/components/formComponents/RadioButton.tsx","../../src/components/formComponents/DatePicker.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["getTransformedValidation","validation","transformedValidation","pattern","value","RegExp","sameAs","validate","getValues","Title","children","classes","formProps","className","classNames","FormInput","input","form","onButtonClick","onInputChange","isSubmitLoading","register","component","hidden","placeholder","type","disabled","title","options","defaultValue","componentProps","customProps","text","inputName","basicInputProps","name","getControlledComponentProps","onChange","fields","e","getSelectSelectedValue","getBasicComponentProps","isLoading","buttonProps","onClick","formInputProps","shouldUnregister","inputProps","style","display","flex","correctDefaultValue","selectedValue","o","item","getSelectDefaultValue","rules","control","render","field","renderComponent","React","layout","label","unit","labelPosition","flexDirection","position","getFlexDirectionForLabelPosition","ErrorContainer","error","HtmlParser","html","safeHtml","sanitizeHtml","dangerouslySetInnerHTML","__html","mapFormInput","TextInput","useState","isPasswordVisible","setPasswordVisible","SelectInput","flatten","list","willReturn","i","Array","group","getSimpleOptions","key","option","Checkbox","id","htmlFor","marginLeft","Button","TextArea","height","rows","RadioButton","DatePicker","inputs","onSubmit","layoutComponent","components","formName","_form","useForm","mode","watch","handleSubmit","getInputPropsForRepeatableForm","formField","watchers","Layout","props","renderInput","renderChildren","i1","i2","index","sortedInputs","justifyContent","validationMode","App","basicValidationInputs","console","log","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.af0e27c4.chunk.js","sourcesContent":["import { ValidationValueMessage } from \"react-hook-form\";\nimport { Validation, Validations } from \"./types\";\n\nexport const getTransformedValidation = (\n  getValues: (field: string) => string,\n  validation?: Validations,\n) => {\n  if (validation == null) {\n    return {};\n  }\n\n  let transformedValidation = {\n    ...validation,\n    pattern: validation.pattern && {\n      ...validation.pattern,\n      value: new RegExp(\n        (validation.pattern as ValidationValueMessage).value as string,\n        \"i\"\n      ),\n    },\n  };\n\n  if (validation.validate && validation.validate.sameAs) {\n    const sameAs = validation.validate.sameAs;\n    transformedValidation = {\n      ...transformedValidation,\n      validate: {\n        sameAs: (value: string) =>\n          getValues((sameAs as Validation).value) === value || (sameAs as Validation).message,\n      },\n    };\n  }\n  return transformedValidation;\n};\n\nexport const flatten = (list:[], input?: any) => {\n  const willReturn = input === undefined ? [] : input\n  for (let i = 0; i < list.length; i++){\n    if (Array.isArray(list[ i ])){\n      flatten(list[ i ], willReturn)\n    } else {\n      willReturn.push(list[ i ])\n    }\n  }\n  return willReturn\n}\n","import classNames from 'classnames'\nimport React from 'react'\nimport { TitleFormProps } from '../../types'\n\ninterface Props {\n  children?: React.ReactNode\n  formProps: TitleFormProps\n}\n\nconst Title = ({ children, formProps: { classes } }: Props) => {\n  return (\n    <span className={classNames('jtrf-title', classes?.title)}>{children}</span>\n  )\n}\n\nexport default Title\n","import React, { ChangeEvent } from 'react'\nimport {\n  Controller,\n  ControllerRenderProps,\n  FieldValues,\n  UseFormReturn\n} from 'react-hook-form'\nimport { getTransformedValidation } from '../../helpers'\nimport {\n  getSelectDefaultValue,\n  getSelectSelectedValue\n} from '../../inputHelpers'\nimport { Option, Input, Classes } from '../../types'\nimport Title from '../formComponents/Title'\n\ninterface Props {\n  children: any\n  onInputChange?: (value: any, name: string) => void\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  input: Input\n  form: UseFormReturn<FieldValues>\n  isSubmitLoading?: boolean\n  classes?: Classes\n}\n\nconst FormInput = ({\n  children,\n  input,\n  form,\n  onButtonClick,\n  onInputChange,\n  isSubmitLoading,\n  classes\n}: Props) => {\n  const { register, getValues } = form\n  const {\n    component,\n    validation,\n    hidden,\n    placeholder,\n    type,\n    disabled,\n    title,\n    options,\n    defaultValue,\n    componentProps,\n    customProps,\n    text,\n  } = input\n  const inputName = input.name as string\n  const basicInputProps = {\n    placeholder,\n    type,\n    name: inputName,\n    disabled: disabled === 'true',\n  }\n\n  const getControlledComponentProps = (\n    fields: ControllerRenderProps<FieldValues, string>\n  ) => {\n    switch (component) {\n      case 'SelectInput':\n        return {\n          ...basicInputProps,\n          ...fields,\n          type: basicInputProps.type || 'select',\n          options,\n          onChange: (e: React.ChangeEvent<HTMLSelectElement> | Option) => {\n            fields.onChange(e)\n            onInputChange?.(getSelectSelectedValue(e), inputName)\n          }\n        }\n      case 'DatePicker':\n        return {\n          ...basicInputProps,\n          ...fields,\n          type: basicInputProps.type || 'date',\n          onChange: (date: Date) => {\n            fields.onChange(date)\n            onInputChange?.(date, inputName)\n          }\n        }\n      default:\n        return {}\n    }\n  }\n\n  const getBasicComponentProps = () => {\n    // Button component shouldn't be registred\n    if (component === 'Button') {\n      return {\n        title: title || '',\n        isLoading: isSubmitLoading,\n        buttonProps: {\n          ...basicInputProps,\n          disabled: basicInputProps.disabled || isSubmitLoading,\n          onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            onButtonClick?.(e, inputName)\n          }\n        }\n      }\n    }\n\n    const formInputProps = register(inputName, {\n      ...getTransformedValidation(getValues, validation),\n      shouldUnregister: true\n    })\n\n    switch (component) {\n      case 'TextInput': {\n        return {\n          inputProps: {\n            ...formInputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n              onInputChange?.(e.target.value, inputName)\n              formInputProps.onChange(e)\n            }\n          }\n        }\n      }\n      case 'TextArea': {\n        return {\n          inputProps: {\n            ...formInputProps,\n            onChange: (e: ChangeEvent<HTMLTextAreaElement>) => {\n              onInputChange?.(e.target.value, inputName)\n              formInputProps.onChange(e)\n            }\n          }\n        }\n      }\n      case 'Checkbox': {\n        return {\n          inputProps: {\n            ...formInputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n              onInputChange?.(e.target.checked, inputName)\n              formInputProps.onChange(e)\n            }\n          },\n          text\n        }\n      }\n      case 'RadioButton': {\n        return {\n          options,\n          inputProps: {\n            ...formInputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n              onInputChange?.(e, inputName)\n              formInputProps.onChange(e)\n            }\n          },\n          text\n        }\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  const renderComponent = () => {\n    switch (component) {\n      case 'Title': {\n        return <Title formProps={{ classes, form, customProps }}>{title}</Title>\n      }\n      case 'DatePicker':\n      case 'SelectInput': {\n        const correctDefaultValue =\n          component === 'SelectInput'\n            ? getSelectDefaultValue(options, defaultValue)\n            : defaultValue\n\n        return (\n          <Controller\n            name={inputName}\n            rules={getTransformedValidation(getValues, validation)}\n            defaultValue={correctDefaultValue}\n            control={form.control}\n            render={({ field }) =>\n              React.cloneElement(children, {\n                ...componentProps,\n                formProps: {\n                  inputProps: {\n                    ...getControlledComponentProps(field),\n                    defaultValue: correctDefaultValue\n                  },\n                  form,\n                  customProps\n                }\n              })\n            }\n          />\n        )\n      }\n      default: {\n        return React.cloneElement(children, {\n          ...componentProps,\n          formProps: {\n            form,\n            ...getBasicComponentProps(),\n            customProps\n          }\n        })\n      }\n    }\n  }\n\n  return (\n    <div style={{ display: hidden ? 'none' : 'flex', flex: 1 }}>\n      {renderComponent()}\n    </div>\n  )\n}\n\nexport default FormInput\n","import { Option, GroupOption } from './types'\n\nexport const getSelectSelectedValue = (\n  e: Option | React.ChangeEvent<HTMLSelectElement>\n) => {\n  // for react-select\n  if ((e as Option).value) {\n    return (e as Option).value\n  }\n  return (e as React.ChangeEvent<HTMLSelectElement>).target.value\n}\n\nexport const getSelectDefaultValue = (options?: Option[] | GroupOption[], defaultValue?: number | string) => {\n  let selectedValue: Option | null | undefined = null\n  if (options?.length && defaultValue) {\n    // if it's grouped options\n    if ((options[0] as GroupOption).options) {\n      ;(options as GroupOption[]).map((o) => {\n        o.options.map((item) => {\n          if (item.value === defaultValue) {\n            selectedValue = item\n          }\n        })\n      })\n    } else {\n      selectedValue = (options as Option[]).find(\n        (o: Option) => o.value === defaultValue\n      )\n    }\n  }\n  return selectedValue\n}\n\nexport const inputsWithController = ['SelectInput', 'DatePicker']\n","import classNames from 'classnames'\nimport React from 'react'\nimport { LabelPosition } from '../../types'\n\nimport './layout.css'\n\nexport interface LayoutProps {\n  layout: [number, number]\n  children: React.ReactNode\n  label?: string\n  labelPosition?: LabelPosition\n  unit?: string\n}\n\nconst FormLayout = ({\n  layout,\n  children,\n  label,\n  unit,\n  labelPosition = 'left'\n}: LayoutProps) => {\n  const getFlexDirectionForLabelPosition = (position?: LabelPosition): any => {\n    switch (position) {\n      case 'top':\n        return 'column'\n      case 'bottom':\n        return 'column-reverse'\n      case 'right':\n        return 'row-reverse'\n      default:\n        return ''\n    }\n  }\n\n  return (\n    <div\n      className={classNames('jtrf-input-layout')}\n      style={{\n        flexDirection: getFlexDirectionForLabelPosition(labelPosition)\n      }}\n    >\n      <div\n        className={classNames(`jtrf-input-layout__label-container`)}\n        style={{\n          // @ts-ignore\n          '--label-flex': layout[0],\n          '--label-align': labelPosition === 'left' ? 'flex-end' : 'flex-start',\n          '--label-margin':\n            labelPosition === 'left' ? '0 16px 0 0' : '0 0 0 16px'\n        }}\n      >\n        {!!label && (\n          <span className={classNames('jtrf-input-layout__label')}>\n            {label}\n          </span>\n        )}\n      </div>\n      <div\n        className={classNames(`jtrf-input-layout__input-container`)}\n        style={{\n          // @ts-ignore\n          '--input-flex': layout[1]\n        }}\n      >\n        {children}\n        {unit && (\n          <span className={classNames('jtrf-input-layout__unit')}>{unit}</span>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(FormLayout)\n","import classNames from 'classnames'\nimport React from 'react'\nimport { ReactComponent as ErrorSVG } from '../../icons/error.svg'\nimport { Classes } from '../../types'\n\ninterface Props {\n  error?: { message: string }\n  classes?: Classes\n}\n\nconst ErrorContainer = ({ classes, error }: Props) => {\n  if (error == null) {\n    return null\n  }\n  return (\n    <div\n      className={classNames(\n        'jtrf-input-container__error-container',\n        classes?.errorContainer\n      )}\n    >\n      <ErrorSVG\n        className={classNames(\n          'jtrf-input-container__error-icon',\n          classes?.errorIcon\n        )}\n      />\n      <span\n        className={classNames(\n          'jtrf-input-container__error-message',\n          classes?.errorMessage\n        )}\n      >\n        {error.message}\n      </span>\n    </div>\n  )\n}\n\nexport default ErrorContainer\n","import React, { useState } from 'react'\nimport { InputFormProps } from '../../types'\nimport { ReactComponent as ShowSVG } from '../../icons/eye.svg'\nimport classNames from 'classnames'\nimport './input.css'\nimport ErrorContainer from './ErrorContainer'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst TextInput = ({ formProps }: Props) => {\n  const [isPasswordVisible, setPasswordVisible] = useState(false)\n  const { inputProps, form, classes } = formProps\n  const { type, name } = inputProps\n  const error = form.formState.errors[name]\n\n  return (\n    <div\n      className={classNames('jtrf-input-container', classes?.inputContainer)}\n    >\n      <input\n        {...inputProps}\n        className={classNames(\n          'jtrf-input-container__input',\n          'jtrf-input-container__input--text-input',\n          classes?.input,\n          {\n            'jtrf-input-container__input--error': !!error,\n            [classes?.inputError || '']: !!error && classes?.inputError\n          }\n        )}\n        type={\n          type === 'password' ? (isPasswordVisible ? 'text' : 'password') : type\n        }\n      />\n      {type === 'password' && (\n        <button\n          className={classNames(\n            'jtrf-input-container__pswd-button',\n            classes?.pswdButton\n          )}\n          type='button'\n          onClick={() => setPasswordVisible((prevState) => !prevState)}\n        >\n          <ShowSVG />\n        </button>\n      )}\n      <ErrorContainer error={error} classes={classes} />\n    </div>\n  )\n}\n\nexport default TextInput\n","import React from 'react';\nimport sanitizeHtml from 'sanitize-html';\n\nexport const prepositions = (value: string) => {\n    return value\n      ? value.replace(\n          /(\\s|^)(a|i|k|o|s|u|v|z)(\\s(a|i|k|o|s|u|v|z))?(\\s+)/gim,\n          '$1$2$3\\u00A0',\n        )\n      : '';\n  };\n\ninterface Props {\n  html?: string | null;\n  style?: {};\n}\n\nconst HtmlParser = ({ html, style }: Props) => {\n  if (html == null) {\n    return null;\n  }\n  const safeHtml = sanitizeHtml(prepositions(html));\n  return <div dangerouslySetInnerHTML={{ __html: safeHtml }} style={style} />;\n};\n\nexport default HtmlParser;\n","import React, { FunctionComponent } from 'react'\nimport { FieldValues, useForm, UseFormReturn } from 'react-hook-form'\nimport {\n  ButtonFormProps,\n  Classes,\n  Components,\n  Input,\n  InputFormProps,\n  Item\n} from '../../types'\nimport FormInput from './FormInput'\nimport FormLayout, { LayoutProps } from './FormLayout'\nimport SelectInput from '../formComponents/SelectInput'\nimport TextInput from '../formComponents/TextInput'\nimport Checkbox from '../formComponents/Checkbox'\nimport Button from '../formComponents/Button'\nimport TextArea from '../formComponents/TextArea'\nimport RadioButton from '../formComponents/RadioButton'\nimport Title from '../formComponents/Title'\nimport DatePicker from '../formComponents/DatePicker'\nimport classNames from 'classnames'\n\nconst mapFormInput = {\n  TextInput,\n  SelectInput,\n  Checkbox,\n  Button,\n  TextArea,\n  RadioButton,\n  Title,\n  DatePicker\n}\n\ninterface Props {\n  onSubmit?: (values: any) => void\n  inputs: Item[] | null\n  layout?: [number, number]\n  form?: UseFormReturn<FieldValues>\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  onInputChange?: (checked: boolean | number | string, name: string) => void\n  validationMode?: 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched' | 'all'\n  layoutComponent?: FunctionComponent<any>\n  components?: Components\n  classes?: Classes\n  // neccessary repetable form\n  fields?: Record<'id', string>[]\n  formName?: string\n}\n\nconst Form = ({\n  inputs,\n  onSubmit,\n  layout = [3, 7],\n  form,\n  onInputChange,\n  onButtonClick,\n  layoutComponent,\n  components = {},\n  formName,\n  fields,\n  classes\n}: Props) => {\n  const _form = form || useForm({ mode: 'onBlur' })\n  const { watch, handleSubmit } = _form\n\n  const getInputPropsForRepeatableForm = (\n    name: string,\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    // if it's not repeatableForm\n    if (!formField) {\n      return {}\n    }\n    return {\n      name: `${formName}.${formIndex}.${name}`,\n      defaultValue: (formField as any).value\n    }\n  }\n\n  if (inputs == null) {\n    return null\n  }\n\n  const watchers: { [key: string]: any } = {}\n\n  const Layout = (props: LayoutProps) =>\n    layoutComponent ? (\n      React.createElement(layoutComponent, { ...props })\n    ) : (\n      <FormLayout {...props} />\n    )\n\n  // IT SETS WATCHERS FOR CONDITINAL RENDER\n  inputs.map((input) => {\n    if (input.conditionalChildrenRender && input.name) {\n      watchers[input.name] = watch(input.name)\n    }\n  })\n\n  const renderInput = (\n    input: Item,\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    const component = input.component\n      ? components[input.component] || mapFormInput[input.component]\n      : null;\n\n    return (\n      <Layout layout={layout} label={input.label} unit={input.unit} key={`${input.name}_layout`}>\n        <FormInput\n          onInputChange={onInputChange}\n          onButtonClick={onButtonClick}\n          classes={classes}\n          input={{\n            ...(input as Input),\n            ...getInputPropsForRepeatableForm(\n              input.name as string,\n              formIndex,\n              formField\n            )\n          }}\n          form={_form}\n        >\n          {component\n            ? React.createElement(\n                component as React.FunctionComponent<\n                  InputFormProps | ButtonFormProps\n                >\n              )\n            : ''}\n        </FormInput>\n      </Layout>\n    )\n  }\n\n  const renderChildren = (\n    inputs: Item[],\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    const sortedInputs = inputs.sort(\n      (i1, i2) => (i1.order || 0) - (i2.order || 0)\n    )\n    return sortedInputs.map((item, index) => {\n      // FOR CONDITIONAL RENDER\n      if (item.children && item.conditionalChildrenRender) {\n        return (\n          <React.Fragment key={`${item.name}${item.label}_${index}`}>\n            {renderInput(item as Input, formIndex, formField)}\n            {watchers[(item as Input).name as string]\n              ? renderChildren(item.children, formIndex, formField)\n              : null}\n          </React.Fragment>\n        )\n      }\n\n      // FOR DIV WRAPPERS WITH INNER CHILDRENS\n      if (item.children) {\n        const sortedInputs = item.children.sort(\n          (i1, i2) => (i1.order || 0) - (i2.order || 0)\n        )\n        return (\n          <div\n            className={classNames(\n              'jtrf-children-wrapper',\n              classes?.childrenWrapper\n            )}\n            key={`form-${index}`}\n            style={{ justifyContent: item.align || 'space-between' }}\n          >\n            {sortedInputs.map((i) => (\n              <div\n                className='jtrf-children-wrapper__child'\n                key={`form-child-${i.name}${i.label}`}\n              >\n                {renderChildren([i], formIndex, formField)}\n              </div>\n            ))}\n          </div>\n        )\n      }\n\n      // RENDER CASUAL INPUT WITHOUT CHILDRENS\n      return renderInput(item as Input, formIndex, formField)\n    })\n  }\n\n  return (\n    <div className='jtrf-form-container'>\n      <form onSubmit={onSubmit && handleSubmit(onSubmit)}>\n        {fields\n          ? fields.map((formField, index) => (\n              <div key={formField.id}>\n                {renderChildren(inputs, index, formField)}\n              </div>\n            ))\n          : renderChildren(inputs, 0)}\n      </form>\n    </div>\n  )\n}\n\nexport default React.memo(Form)\n","import React from 'react'\nimport classNames from 'classnames'\nimport { GroupOption, InputFormProps, Option } from '../../types'\nimport { flatten } from '../../helpers'\nimport './input.css'\nimport ErrorContainer from './ErrorContainer'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst SelectInput = ({ formProps }: Props) => {\n  const { inputProps, form, classes } = formProps\n  const error = form.formState.errors[inputProps.name]\n\n  const getSimpleOptions = () => {\n    const { options } = inputProps\n    if ((options?.[0] as GroupOption).options) {\n      const splittedOptions = (options as GroupOption[])?.map((group) => [\n        ...group.options\n      ])\n      return flatten(splittedOptions as [])\n    }\n    return inputProps.options as Option[]\n  }\n\n  return (\n    <div\n      className={classNames('jtrf-input-container', classes?.inputContainer)}\n    >\n      <select\n        {...inputProps}\n        className={classNames(\n          'jtrf-input-container__input',\n          'jtrf-input-container__input--select',\n          classes?.input,\n          {\n            'jtrf-input-container__input--error': !!error,\n            [classes?.inputError || '']: !!error && classes?.inputError\n          }\n        )}\n      >\n        {getSimpleOptions().map((option: Option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n      <ErrorContainer error={error} classes={classes} />\n    </div>\n  )\n}\n\nexport default SelectInput\n","import classNames from 'classnames'\nimport React from 'react'\nimport { InputFormProps } from '../../types'\nimport HtmlParser from '../HtmlParser'\nimport ErrorContainer from './ErrorContainer'\nimport './input.css'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst Checkbox = ({ formProps }: Props) => {\n  const { inputProps, form, classes, text } = formProps\n  const { name } = inputProps\n  const error = form.formState.errors[name]\n\n  return (\n    <div\n      className={classNames('jtrf-input-container', classes?.inputContainer)}\n    >\n      <input\n        {...inputProps}\n        id={inputProps.name}\n        type='checkbox'\n        className={classNames(\n          'jtrf-input-container__input',\n          'jtrf-input-container__input--checkbox',\n          classes?.input,\n          {\n            'jtrf-input-container__input---error': !!error,\n            [classes?.inputError || '']: !!error && classes?.inputError\n          }\n        )}\n      />\n      <label htmlFor={inputProps.name}>\n        <HtmlParser html={text} style={{ marginLeft: '16px' }} />\n      </label>\n      <ErrorContainer error={error} classes={classes} />\n    </div>\n  )\n}\n\nexport default Checkbox\n","import classNames from 'classnames'\nimport React from 'react'\nimport { ButtonFormProps } from '../../types'\ninterface Props {\n  formProps: ButtonFormProps\n}\n\nconst Button = ({ formProps }: Props) => {\n  const { buttonProps, title, classes } = formProps\n  return (\n    <button\n      {...buttonProps}\n      className={classNames('jtrf-button', classes?.button)}\n    >\n      {title}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react'\nimport { InputFormProps } from '../../types'\nimport classNames from 'classnames'\n\nimport './input.css'\nimport ErrorContainer from './ErrorContainer'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst TextArea = ({ formProps }: Props) => {\n  const rows = 5\n  const { inputProps, form, classes } = formProps\n  const error = form.formState.errors[inputProps.name]\n\n  return (\n    <div\n      className={classNames('jtrf-input-container', classes?.inputContainer)}\n    >\n      <textarea\n        {...inputProps}\n        className={classNames(\n          'jtrf-input-container__input',\n          'jtrf-input-container__input--textarea',\n          classes?.input,\n          {\n            'jtrf-input-container__input--error': !!error,\n            [classes?.inputError || '']: !!error && classes?.inputError\n          }\n        )}\n        style={{ height: `${rows * 30}px` }}\n        rows={rows}\n      />\n      <ErrorContainer error={error} classes={classes} />\n    </div>\n  )\n}\n\nexport default TextArea\n","import classNames from 'classnames'\nimport React from 'react'\nimport { InputFormProps, Option } from '../../types'\n\nimport './input.css'\nimport ErrorContainer from './ErrorContainer'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst RadioButton = ({ formProps }: Props) => {\n  const { inputProps, form, classes, options } = formProps\n  const { name } = inputProps\n  const error = form.formState.errors[name]\n\n  return (\n    <div\n      className={classNames('jtrf-input-container', classes?.inputContainer)}\n    >\n      <div>\n        {(options as Option[])?.map((option) => (\n          <div key={option.value} className='jtrf-input-container__option'>\n            <input\n              {...inputProps}\n              id={option.value}\n              value={option.value}\n              type='radio'\n              className={classNames(\n                'jtrf-input-container__input',\n                'jtrf-input-container__input--radio-button',\n                classes?.input,\n                {\n                  'jtrf-input-container__input---error': !!error,\n                  [classes?.inputError || '']: !!error && classes?.inputError\n                }\n              )}\n            />\n            &nbsp;\n            <label htmlFor={option.value}>{option.label}</label>\n          </div>\n        ))}\n      </div>\n      <ErrorContainer error={error} classes={classes} />\n    </div>\n  )\n}\n\nexport default RadioButton\n","import React from 'react'\nimport { InputFormProps } from '../../types'\nimport classNames from 'classnames'\n\nimport './input.css'\nimport ErrorContainer from './ErrorContainer'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst DatePicker = ({ formProps }: Props) => {\n  const { inputProps, form, classes } = formProps\n  const { name } = inputProps\n  const error = form.formState.errors[name]\n\n  return (\n    <div\n      className={classNames('jtrf-input-container', classes?.inputContainer)}\n    >\n      <input\n        {...inputProps}\n        className={classNames(\n          'jtrf-input-container__input',\n          'jtrf-input-container__input--datepicker',\n          classes?.input,\n          {\n            'jtrf-input-container__input--error': !!error,\n            [classes?.inputError || '']: !!error && classes?.inputError\n          }\n        )}\n      />\n      <ErrorContainer error={error} classes={classes} />\n    </div>\n  )\n}\n\nexport default DatePicker\n","import * as React from 'react'\nimport { FieldValues, UseFormReturn } from 'react-hook-form'\nimport GeneratedForm from './components/form/Form'\nimport { Components, Item } from './types'\n\nexport { InputFormProps, ButtonFormProps, Components } from './types'\nexport { LayoutProps } from './components/form/FormLayout'\n\ninterface Props {\n  layout?: [number, number]\n  inputs: Item[]\n  fields?: Record<'id', string>[]\n  onSubmit?: (value: any) => void\n  components?: Components\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  form?: UseFormReturn<FieldValues>\n  layoutComponent?: React.FunctionComponent<any>\n  formName?: string\n  onInputChange?: (checked: boolean | number | string, name: string) => void\n  validationMode?: 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched' | 'all'\n}\n\nconst Form = ({\n  layout = [3, 7],\n  inputs,\n  fields,\n  onSubmit,\n  components,\n  onButtonClick,\n  validationMode,\n  onInputChange,\n  layoutComponent,\n  form,\n  formName\n}: Props) => {\n  return (\n    <GeneratedForm\n      layout={layout}\n      inputs={inputs}\n      fields={fields}\n      onSubmit={onSubmit}\n      components={components}\n      onButtonClick={onButtonClick}\n      onInputChange={onInputChange}\n      validationMode={validationMode}\n      layoutComponent={layoutComponent}\n      form={form}\n      formName={formName}\n    />\n  )\n}\n\nexport default Form\n","import React from 'react'\n\nimport Form from 'json-to-react-form'\nimport 'json-to-react-form/dist/index.css'\nimport basicValidationInputs from './forms/basicValidationForm.json';\n\nconst App = () => {\n  return <Form layout={[3,7]} inputs={basicValidationInputs} onSubmit={console.log}/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}