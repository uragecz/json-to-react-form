{"version":3,"sources":["../../src/components/Flex.tsx","../../src/helpers.tsx","../../src/components/Text.tsx","../../src/components/formComponents/Title.tsx","../../src/components/form/FormInput.tsx","../../src/components/form/FormLayout.tsx","../../src/components/formComponents/SelectInput.tsx","../../src/components/formComponents/TextInput.tsx","../../src/components/HtmlParser.tsx","../../src/components/formComponents/Checkbox.tsx","../../src/components/formComponents/Button.tsx","../../src/components/formComponents/TextArea.tsx","../../src/style.tsx","../../src/components/form/Form.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Flex","getTransformedValidation","validation","transformedValidation","pattern","value","RegExp","sameAs","validate","getValues","message","Text","Title","children","React","TitleText","FormInput","isSubmitLoading","customProps","inputName","input","getComponentProps","register","inputProps","placeholder","type","disabled","onChange","e","onInputChange","buttonProps","name","title","isLoading","onClick","onButtonClick","options","display","hidden","flex","defaultValue","selectedValue","o","item","getSelectDefaultValue","rules","control","form","render","field","formProps","customStyle","renderComponent","labelPosition","mb","flexDirection","position","getFlexDirectionForLabelPosition","alignItems","layout","justifyContent","mr","ml","css","labelStyle","textAlign","unit","Error","StyledInput","error","darken","ShowPasswordButton","Icon","HtmlParser","html","safeHtml","sanitizeHtml","dangerouslySetInnerHTML","__html","Checkmark","Label","StyledButton","StyledTextArea","style","mapFormInput","TextInput","useState","isPasswordVisible","Boolean","setPasswordVisible","prevState","SelectInput","customStyles","container","provided","menu","zIndex","border","borderWidth","borderStype","borderColor","state","boxShadow","option","backgroundColor","lighten","inputBackgroundColor","styles","Checkbox","label","Button","TextArea","alignSelf","height","rows","components","fields","_form","useForm","mode","handleSubmit","correctStyle","borderRadius","errorColor","labelColor","buttonBackgroundColor","buttonBorderColor","buttonTextColor","inputBorderColor","checkboxActiveColor","getInputPropsForRepeatableForm","formName","formIndex","formField","inputs","watchers","Layout","props","layoutComponent","watch","renderInput","component","renderChildren","i1","i2","key","index","sortedInputs","i","theme","breakpoints","desktopBreakpoint","space","onSubmit","id","App","loginInputs","console","log","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ce785a7f.chunk.js","sourcesContent":["import styled from '@emotion/styled'\nimport { typography, space, color, flexbox, TypographyProps, SpaceProps, FlexboxProps, LayoutProps, layout, PositionProps, position } from 'styled-system'\n\nexport type CustomFlexProps =\n TypographyProps &\n FlexboxProps &\n LayoutProps &\n PositionProps &\n SpaceProps;\n\ninterface Props extends CustomFlexProps {\n  row?: boolean;\n}\n\nconst Flex = styled('div')<Props>`\n  display: flex;\n  ${flexbox};\n  ${typography};\n  ${space};\n  ${color};\n  ${layout};\n  ${position};\n`;\n\nexport default Flex;","import { ValidationValueMessage } from \"react-hook-form\";\nimport { Validation, Validations } from \"./types\";\n\nexport const getTransformedValidation = (\n  getValues: (field: string) => string,\n  validation?: Validations,\n) => {\n  if (validation == null) {\n    return {};\n  }\n\n  let transformedValidation = {\n    ...validation,\n    pattern: validation.pattern && {\n      ...validation.pattern,\n      value: new RegExp(\n        (validation.pattern as ValidationValueMessage).value as string,\n        \"i\"\n      ),\n    },\n  };\n\n  if (validation.validate && validation.validate.sameAs) {\n    const sameAs = validation.validate.sameAs;\n    transformedValidation = {\n      ...transformedValidation,\n      validate: {\n        sameAs: (value: string) =>\n          getValues((sameAs as Validation).value) === value || (sameAs as Validation).message,\n      },\n    };\n  }\n  return transformedValidation;\n};\n","import {\n    space,\n    color,\n    lineHeight,\n    fontSize,\n    textAlign,\n    fontWeight,\n    SpaceProps,\n    FontSizeProps,\n    FontWeightProps,\n    TextAlignProps,\n    ColorProps,\n    LineHeightProps,\n  } from 'styled-system';\n  import styled from '@emotion/styled';\n\n  export type TextProps = SpaceProps &\n    LineHeightProps &\n    ColorProps &\n    FontSizeProps &\n    TextAlignProps &\n    FontWeightProps;\n\n  const Text = styled('span')<TextProps>`\n    ${space};\n    ${color};\n    ${lineHeight};\n    ${fontSize};\n    ${fontWeight};\n    ${textAlign};\n  `;\n\n  Text.displayName = 'Text';\n\n  export default Text;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Text from '../Text';\n\nconst Title = ({ children }: { children?: React.ReactNode }) => {\n    return(\n        <TitleText>\n            {children}\n        </TitleText>\n    )\n};\n\nexport default Title;\n\nconst TitleText = styled(Text)`\n    font-size: 1.5rem;\n    font-weight: 700;\n`;","import React, { ChangeEvent } from 'react'\nimport { Controller, FieldValues, UseFormReturn } from 'react-hook-form'\nimport { getTransformedValidation } from '../../helpers'\nimport { CustomStyle, Item, InputProps, GroupOption, Option } from '../../types'\nimport Flex from '../Flex'\nimport Title from '../formComponents/Title'\n\ninterface Props {\n  children: any\n  onInputChange?: (value: any, name: string) => void\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  input: Item\n  form: UseFormReturn<FieldValues>\n  customStyle: CustomStyle\n  isSubmitLoading?: boolean\n}\n\nconst FormInput = ({\n  children,\n  input,\n  form,\n  onButtonClick,\n  onInputChange,\n  customStyle,\n  isSubmitLoading\n}: Props) => {\n  const { register, getValues } = form\n  const {\n    type,\n    disabled,\n    component,\n    name,\n    validation,\n    placeholder,\n    hidden,\n    title,\n    options,\n    defaultValue,\n    componentProps,\n    customProps\n  } = input\n\n  const inputName = input.name as string\n\n  const getComponentProps = () => {\n    const input = register(inputName, getTransformedValidation(getValues, validation))\n    let inputProps: InputProps = {\n      placeholder,\n      type,\n      disabled: disabled === 'true',\n      ...input,\n      onChange: (e: ChangeEvent<HTMLInputElement>) => {\n        onInputChange?.(e.target.value, inputName);\n        input.onChange(e);\n      }\n    }\n    switch (component) {\n      case 'Button': {\n        return {\n          buttonProps: {\n            name,\n            type: type as 'submit' | 'button' | 'reset',\n            disabled: disabled === 'true' || isSubmitLoading,\n            title: title || '',\n            isLoading: isSubmitLoading,\n            onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>\n              onButtonClick?.(e, inputName)\n          }\n        }\n      }\n      case 'TextInput': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) =>\n              onInputChange?.(e.target.value, inputName)\n          }\n        }\n      }\n      case 'TextArea': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: (e: ChangeEvent<HTMLTextAreaElement>) =>\n              onInputChange?.(e.target.value, inputName)\n          }\n        }\n      }\n      case 'Checkbox': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) =>\n              onInputChange?.(e.target.checked, inputName)\n          }\n        }\n      }\n      case 'SelectInput': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: ({ value }: Option) => onInputChange?.(value, inputName),\n            options\n          }\n        }\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  const getSelectDefaultValue = () => {\n    let selectedValue: Option | null | undefined = null\n    if (options?.length && defaultValue) {\n      // if it's grouped options\n      if ((options[0] as GroupOption).options) {\n        ;(options as GroupOption[]).map((o) => {\n          o.options.map((item) => {\n            if (item.value === defaultValue) {\n              selectedValue = item\n            }\n          })\n        })\n      } else {\n        selectedValue = (options as Option[]).find(\n          (o: Option) => o.value === defaultValue\n        )\n      }\n    }\n    return selectedValue\n  }\n\n  const renderComponent = () => {\n    switch (component) {\n      case 'Title': {\n        return <Title>{title}</Title>\n      }\n      case 'SelectInput': {\n        const defaultValue = getSelectDefaultValue()\n        return (\n          <Controller\n            name={inputName}\n            rules={getTransformedValidation(getValues, validation)}\n            defaultValue={defaultValue}\n            control={form.control}\n            render={({ field }) =>\n              React.cloneElement(children, {\n                ...componentProps,\n                formProps: {\n                  inputProps: {\n                    defaultValue,\n                    ...getComponentProps().inputProps,\n                    ...field\n                  },\n                  form,\n                  customStyle,\n                  customProps\n                }\n              })\n            }\n          />\n        )\n      }\n      default: {\n        return React.cloneElement(children, {\n          ...componentProps,\n          formProps: {\n            form,\n            customStyle,\n            ...getComponentProps(),\n            customProps\n          }\n        })\n      }\n    }\n  }\n\n  return (\n    <Flex display={hidden ? 'none' : 'flex'} flex={1}>\n      {renderComponent()}\n    </Flex>\n  )\n}\n\nexport default FormInput\n","import { Theme } from '@emotion/react'\nimport { Interpolation } from '@emotion/styled'\nimport React from 'react'\nimport { LabelPosition } from '../../types'\nimport Flex from '../Flex'\nimport Text from '../Text'\n\nexport interface LayoutProps {\n  layout: [number, number]\n  children: React.ReactNode\n  label?: string\n  labelPosition?: LabelPosition\n  labelStyle?: Interpolation<Theme>\n  unit?: string\n}\n\nconst FormLayout = ({\n  layout,\n  children,\n  label,\n  labelStyle,\n  unit,\n  labelPosition = 'left'\n}: LayoutProps) => {\n\n  const getFlexDirectionForLabelPosition = (position?: LabelPosition): any => {\n    switch (position) {\n      case 'top':\n        return 'column'\n      case 'bottom':\n        return 'column-reverse'\n      case 'right':\n        return 'row-reverse'\n      default:\n        return ['column', 'row']\n    }\n  }\n\n  return (\n    <Flex\n      flex={1}\n      mb={4}\n      flexDirection={getFlexDirectionForLabelPosition(labelPosition)}\n      alignItems='center'\n    >\n      <Flex\n        flex={layout[0]}\n        justifyContent={labelPosition === 'left' ? 'flex-end' : 'flex-start'}\n        mr={labelPosition === 'left' ? 3 : 0}\n        ml={labelPosition === 'right' ? 3 : 0}\n      >\n        {!!label && <Text css={labelStyle} textAlign=\"end\">{label}</Text>}\n      </Flex>\n      <Flex flex={layout[1]}>\n        {children}\n        {unit && <Text css={labelStyle}>{unit}</Text>}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default React.memo(FormLayout)\n","import styled from '@emotion/styled'\nimport { darken, lighten } from 'polished'\nimport React from 'react'\nimport Select, { GroupTypeBase, Styles } from 'react-select'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport Flex from '../Flex'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst SelectInput = ({ formProps }: Props) => {\n  const { inputProps, customStyle, form } = formProps\n  const error = form.formState.errors[inputProps.name]\n  const customStyles:\n    | Partial<Styles<any, false, GroupTypeBase<any>>>\n    | undefined = {\n    container: (provided) => ({\n      ...provided,\n      flex: 1\n    }),\n    menu: (provided) => ({\n      ...provided,\n      zIndex: 2,\n      border: `1px solid ${darken(0.1, customStyle.inputBorderColor as string)}`\n    }),\n    control: (provided, state) => ({\n      ...provided,\n      borderWidth: 1,\n      borderStype: 'solid',\n      borderColor: error\n        ? customStyle.errorColor\n        : state.isFocused\n        ? darken(0.1, customStyle.inputBorderColor as string)\n        : customStyle.inputBorderColor,\n      boxShadow: 'none',\n      '&:hover': {\n        boxShadow: 'none',\n        borderColor: error\n          ? customStyle.errorColor\n          : darken(0.1, customStyle.inputBorderColor as string)\n      }\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      backgroundColor: state.isSelected\n        ? customStyle.buttonBackgroundColor\n        : state.isFocused\n        ? lighten(0.6, customStyle.buttonBackgroundColor as string)\n        : customStyle.inputBackgroundColor\n    })\n  }\n\n  return (\n    <Flex flex={1} position='relative'>\n      <Select {...inputProps} styles={customStyles} />\n      {error && (\n        <React.Fragment>\n          <Error customStyle={customStyle}>{error.message}</Error>\n        </React.Fragment>\n      )}\n    </Flex>\n  )\n}\n\nexport default SelectInput\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  bottom: -14px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n","import styled from '@emotion/styled'\nimport React, { useState } from 'react'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport { ReactComponent as ErrorSVG } from '../../icons/error.svg'\nimport { ReactComponent as ShowSVG } from '../../icons/eye.svg'\nimport Flex from '../Flex'\nimport { css } from '@emotion/react'\nimport { darken } from 'polished'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst TextInput = ({ formProps }: Props) => {\n  const [isPasswordVisible, setPasswordVisible] = useState(false)\n  const { inputProps, form, customStyle } = formProps\n  const { type, name } = inputProps\n  const error = form.formState.errors[name];\n  return (\n    <Flex flex={1} position='relative'>\n      <StyledInput\n        {...inputProps}\n        customStyle={customStyle}\n        css={css`\n          padding-right: ${type === 'password' ? 5 : 0};\n        `}\n        type={\n          type === 'password' ? (isPasswordVisible ? 'text' : 'password') : type\n        }\n        error={Boolean(error)}\n      />\n      {type === 'password' && (\n        <ShowPasswordButton\n          customStyle={customStyle}\n          type='button'\n          onClick={() => setPasswordVisible((prevState) => !prevState)}\n        >\n          <ShowSVG />\n        </ShowPasswordButton>\n      )}\n      {error && (\n        <React.Fragment>\n          <Icon>\n            <ErrorSVG />\n          </Icon>\n          <Error customStyle={customStyle}>{error.message}</Error>\n        </React.Fragment>\n      )}\n    </Flex>\n  )\n}\n\nexport default TextInput\n\nconst StyledInput = styled.input<{ error: boolean; customStyle: CustomStyle }>`\n  padding: 10.5px 14px;\n  width: 100%;\n  border-width: 1px;\n  border-style: solid;\n  border-color: ${({ error, customStyle }) =>\n    error ? customStyle.errorColor : customStyle.inputBorderColor};\n\n  &:hover {\n    border-color: ${({ error, customStyle }) =>\n      error\n        ? customStyle.errorColor\n        : darken(0.1, customStyle.inputBorderColor as string)};\n\n  }\n\n  &:focus {\n    border-color: ${({ customStyle }) => darken(0.1, customStyle.inputBorderColor as string)};\n  }\n\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  background-color: ${({ customStyle }) => customStyle.inputBackgroundColor};\n  outline: none;\n`\n\nconst ShowPasswordButton = styled.button<{ customStyle: CustomStyle }>`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  border: none;\n\n  svg {\n    width: 20px;\n    height: 20px;\n    fill: ${({ customStyle }) => darken(0.5, customStyle.inputBorderColor as string)};\n  }\n`\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  bottom: -14px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n\nconst Icon = styled.div`\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n`\n","import React from 'react';\nimport sanitizeHtml from 'sanitize-html';\n\nexport const prepositions = (value: string) => {\n    return value\n      ? value.replace(\n          /(\\s|^)(a|i|k|o|s|u|v|z)(\\s(a|i|k|o|s|u|v|z))?(\\s+)/gim,\n          '$1$2$3\\u00A0',\n        )\n      : '';\n  };\n\ninterface Props {\n  html: string | null;\n}\n\nconst HtmlParser = ({ html }: Props) => {\n  if (html == null) {\n    return null;\n  }\n  const safeHtml = sanitizeHtml(prepositions(html));\n  return <div dangerouslySetInnerHTML={{ __html: safeHtml }} />;\n};\n\nexport default HtmlParser;\n","import styled from '@emotion/styled'\nimport { darken } from 'polished'\nimport React from 'react'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport HtmlParser from '../HtmlParser'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst Checkbox = ({ formProps }: Props) => {\n  const { inputProps, form, customStyle } = formProps\n  const { label, name } = inputProps\n\n  const error = form.formState.errors[name];\n  return (\n    <Label customStyle={customStyle}>\n      {label != null && <HtmlParser html={label} />}\n      <input {...inputProps} type='checkbox' />\n      <Checkmark error={Boolean(error)} customStyle={customStyle} />\n      {error && <Error customStyle={customStyle}>{error.message}</Error>}\n    </Label>\n  )\n}\n\nexport default Checkbox\n\nconst Checkmark = styled.span<{ customStyle: CustomStyle; error: boolean }>`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  width: 1.25rem;\n  height: 1.25rem;\n  border: ${({ error, customStyle }) =>\n    `1px solid ${\n      error ? customStyle.errorColor : customStyle.inputBorderColor\n    }`};\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  background-color: ${({ customStyle }) => customStyle.inputBackgroundColor};\n  transform: translate(0, -50%);\n\n  &:hover {\n    border: ${({ error, customStyle }) =>\n    `1px solid ${\n      error ? customStyle.errorColor : darken(0.1, customStyle.inputBorderColor as string)\n    }`};\n  }\n\n  ::after {\n    content: '';\n    position: absolute;\n    display: none;\n  }\n`\n\nconst Label = styled.label<{ customStyle: CustomStyle }>`\n  position: relative;\n  display: block;\n  padding-left: 2rem;\n  font-size: 1rem;\n  cursor: pointer;\n  user-select: none;\n\n  input {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    cursor: pointer;\n  }\n\n  input:checked ~ ${Checkmark} {\n    border: none;\n    background-color: ${({ customStyle }) =>\n      customStyle.checkboxActiveColor};\n  }\n\n  ${Checkmark} {\n    ::after {\n      top: 0.25rem;\n      left: 33%;\n      width: 0.25rem;\n      height: 0.5rem;\n      border: solid white;\n      border-width: 0 0.125rem 0.125rem 0;\n      transform: rotate(45deg);\n    }\n  }\n\n  input:checked ~ ${Checkmark} {\n    ::after {\n      display: block;\n    }\n  }\n`\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  top: 42px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n","import styled from \"@emotion/styled\";\nimport { darken } from \"polished\";\nimport React from \"react\";\nimport { ButtonFormProps, CustomStyle } from \"../../types\";\nimport Text from \"../Text\";\n\ninterface Props {\n  formProps: ButtonFormProps;\n}\n\nconst Button = ({ formProps }: Props) => {\n  const { buttonProps, customStyle } = formProps;\n  const { title } = buttonProps;\n  return (\n    <StyledButton customStyle={customStyle} {...buttonProps}>\n      <Text>{title}</Text>\n    </StyledButton>\n  );\n};\n\nexport default Button;\n\nconst StyledButton = styled.button<{ customStyle: CustomStyle }>`\n  display: flex;\n  width: 100%;\n  padding: 1rem 2rem;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-size: 1rem;\n  text-align: center;\n  border-style: solid;\n  border-width: 1px;\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  border-color: ${({ customStyle }) => customStyle.buttonBorderColor};\n  background-color: ${({ customStyle }) => customStyle.buttonBackgroundColor};\n  color: ${({ customStyle }) => customStyle.buttonTextColor};\n\n  &:hover {\n    background-color: ${({ customStyle }) => darken(0.1, customStyle.buttonBackgroundColor as string)};\n  }\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled'\nimport { darken } from 'polished'\nimport React from 'react'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport Flex from '../Flex'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst TextArea = ({ formProps }: Props) => {\n  const rows = 5\n  const { inputProps, form, customStyle } = formProps\n  const error = form.formState.errors[inputProps.name];\n  return (\n    <Flex flex={1} alignSelf='stretch' position='relative'>\n      <StyledTextArea\n        style={{ height: `${rows * 30}px` }}\n        rows={rows}\n        customStyle={customStyle}\n        {...inputProps}\n        error={!!error}\n      />\n      {error && <Error customStyle={customStyle}>{error.message}</Error>}\n    </Flex>\n  )\n}\n\nexport default TextArea\n\nconst StyledTextArea = styled.textarea<{\n  error: boolean\n  customStyle: CustomStyle\n}>`\n  width: 100%;\n  height: 2.5rem;\n  padding: 1rem;\n  line-height: 1.5rem;\n  border: 1px solid\n    ${({ error, customStyle }) =>\n      error ? customStyle.errorColor : customStyle.inputBorderColor};\n\n  &:focus {\n    border-color: ${({ customStyle }) => darken(0.1, customStyle.inputBorderColor as string)};\n  }\n\n  &:hover {\n    border-color: ${({ error, customStyle }) =>\n      error\n        ? customStyle.errorColor\n        : darken(0.1, customStyle.inputBorderColor as string)};\n  }\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  background-color: ${({ customStyle }) => customStyle.inputBackgroundColor};\n  outline: none;\n\n  &::placeholder {\n    font-size: 1rem;\n  }\n`\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  bottom: -16px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n","const style = {\n    borderRadius: \"0.25rem\",\n    errorColor: \"#E73C45\",\n    labelColor: \"#000000\",\n\n    // buton\n    buttonBackgroundColor: \"#033196\",\n    buttonBorderColor: \"transparent\",\n    buttonTextColor: \"#ffffff\",\n\n    // input\n    inputBorderColor: \"#e1e5ed\",\n    inputBackgroundColor: \"#ffffff\",\n    checkboxActiveColor: \"#E73C45\"\n};\n\nexport default style;","import { ThemeProvider } from '@emotion/react'\nimport React, { FunctionComponent } from 'react'\nimport { FieldValues, useForm, UseFormReturn } from 'react-hook-form'\nimport {\n  ButtonFormProps,\n  CustomStyle,\n  Input,\n  InputFormProps,\n  Item\n} from '../../types'\nimport Flex from '../Flex'\nimport FormInput from './FormInput'\nimport FormLayout, { LayoutProps } from './FormLayout'\nimport SelectInput from '../formComponents/SelectInput'\nimport TextInput from '../formComponents/TextInput'\nimport Checkbox from '../formComponents/Checkbox'\nimport Button from '../formComponents/Button'\nimport TextArea from '../formComponents/TextArea'\nimport Title from '../formComponents/Title'\nimport style from '../../style'\n\nconst mapFormInput = {\n  TextInput,\n  SelectInput,\n  Checkbox,\n  Button,\n  TextArea,\n  Title\n}\n\ninterface Props {\n  onSubmit?: (values: any) => void\n  inputs: Item[] | null\n  layout?: [number, number]\n  form?: UseFormReturn<FieldValues>\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  onInputChange?: (checked: boolean | number | string, name: string) => void\n  validationMode?: 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched' | 'all'\n  layoutComponent?: FunctionComponent<any>\n  components?: {\n    TextInput?: FunctionComponent<InputFormProps>\n    SelectInput?: FunctionComponent<InputFormProps>\n    Checkbox?: FunctionComponent<InputFormProps>\n    Button?: FunctionComponent<ButtonFormProps>\n    TextArea?: FunctionComponent<InputFormProps>\n    Title?: FunctionComponent<{ children: React.ReactNode }>\n  }\n  desktopBreakpoint?: number\n  customStyle?: CustomStyle\n\n  // neccessary repetable form\n  fields?: Record<'id', string>[]\n  formName?: string\n}\n\nconst Form = ({\n  inputs,\n  onSubmit,\n  layout = [3, 7],\n  form,\n  onInputChange,\n  onButtonClick,\n  layoutComponent,\n  components = {},\n  customStyle,\n  desktopBreakpoint,\n  formName,\n  fields\n}: Props) => {\n  const _form = form || useForm({ mode: 'onBlur' })\n  const { watch, handleSubmit } = _form\n\n  const correctStyle: CustomStyle = {\n    borderRadius: customStyle?.borderRadius || style.borderRadius,\n    errorColor: customStyle?.errorColor || style.errorColor,\n    labelColor: customStyle?.labelColor || style.labelColor,\n    buttonBackgroundColor:\n      customStyle?.buttonBackgroundColor || style.buttonBackgroundColor,\n    buttonBorderColor:\n      customStyle?.buttonBorderColor || style.buttonBorderColor,\n    buttonTextColor: customStyle?.buttonTextColor || style.buttonTextColor,\n    inputBorderColor: customStyle?.inputBorderColor || style.inputBorderColor,\n    inputBackgroundColor:\n      customStyle?.inputBackgroundColor || style.inputBackgroundColor,\n    checkboxActiveColor:\n      customStyle?.checkboxActiveColor || style.checkboxActiveColor,\n  }\n\n  const getInputPropsForRepeatableForm = (\n    name: string,\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    // if it's not repeatableForm\n    if (!formField) {\n      return {}\n    }\n    return {\n      name: `${formName}.${formIndex}.${name}`,\n      defaultValue: (formField as any).value\n    }\n  }\n\n  if (inputs == null) {\n    return null\n  }\n\n  const watchers: { [key: string]: any } = {}\n\n  const Layout = (props: LayoutProps) =>\n    layoutComponent ? (\n      React.createElement(layoutComponent, { ...props })\n    ) : (\n      <FormLayout {...props} />\n    )\n\n  // IT SETS WATCHERS FOR CONDITINAL RENDER\n  inputs.map((input) => {\n    if (input.conditionalChildrenRender && input.name) {\n      watchers[input.name] = watch(input.name)\n    }\n  })\n\n  const renderInput = (\n    input: Item,\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    const component = input.component\n      ? components[input.component] || mapFormInput[input.component]\n      : null\n    return (\n      <Layout layout={layout} label={input.label} unit={input.unit}>\n        <FormInput\n          onInputChange={onInputChange}\n          onButtonClick={onButtonClick}\n          input={{\n            ...input,\n            ...getInputPropsForRepeatableForm(\n              input.name as string,\n              formIndex,\n              formField\n            )\n          }}\n          form={_form}\n          customStyle={correctStyle}\n        >\n          {component\n            ? React.createElement(\n                component as React.FunctionComponent<\n                  InputFormProps | ButtonFormProps\n                >\n              )\n            : ''}\n        </FormInput>\n      </Layout>\n    )\n  }\n\n  const renderChildren = (\n    inputs: Item[],\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    const sortedInputs = inputs.sort(\n      (i1, i2) => (i1.order || 0) - (i2.order || 0)\n    )\n    return sortedInputs.map((item, index) => {\n      // FOR CONDITIONAL RENDER\n      if (item.children && item.conditionalChildrenRender) {\n        return (\n          <React.Fragment key={`${item.name}${item.label}_${index}`}>\n            {renderInput(item as Input, formIndex, formField)}\n            {watchers[(item as Input).name]\n              ? renderChildren(item.children, formIndex, formField)\n              : null}\n          </React.Fragment>\n        )\n      }\n\n      // FOR DIV WRAPPERS WITH INNER CHILDRENS\n      if (item.children) {\n        const sortedInputs = item.children.sort(\n          (i1, i2) => (i1.order || 0) - (i2.order || 0)\n        )\n        return (\n          <Flex\n            flexDirection={['column', 'row']}\n            alignItems='center'\n            key={`form-${index}`}\n            justifyContent={item.align || 'space-between'}\n          >\n            {sortedInputs.map((i, index) => (\n              <Flex\n                mr={[0, index < sortedInputs.length - 1 ? 4 : 0]}\n                mb={[index < sortedInputs.length - 1 ? 3 : 0, 0]}\n                key={`form-child-${i.name}${i.label}`}\n              >\n                {renderChildren([i], formIndex, formField)}\n              </Flex>\n            ))}\n          </Flex>\n        )\n      }\n\n      // RENDER CASUAL INPUT WITHOUT CHILDRENS\n      return renderInput(item as Input, formIndex, formField)\n    })\n  }\n\n  return (\n    <ThemeProvider\n      theme={{\n        breakpoints: [0, desktopBreakpoint || '52em'],\n        space: [0, 4, 8, 16, 24, 32]\n      }}\n    >\n      <Flex flexDirection='column' flex={1}>\n        <form onSubmit={onSubmit && handleSubmit(onSubmit)}>\n          {fields\n            ? fields.map((formField, index) => (\n                <div key={formField.id}>\n                  {renderChildren(inputs, index, formField)}\n                </div>\n              ))\n            : renderChildren(inputs, 0)}\n        </form>\n      </Flex>\n    </ThemeProvider>\n  )\n}\n\nexport default React.memo(Form)\n","import * as React from 'react'\nimport GeneratedForm from './components/form/Form'\nimport { CustomStyle, Item } from './types'\n\nexport { InputFormProps, ButtonFormProps } from './types'\nexport { LayoutProps } from './components/form/FormLayout'\n\ninterface Props {\n  layout?: [number, number]\n  inputs: Item[]\n  customStyle?: CustomStyle\n  fields?: Record<\"id\", string>[]\n  onSubmit?: (value: any) => void\n}\n\nconst Form = ({ layout = [3, 7], inputs, customStyle, fields, onSubmit }: Props) => {\n  return (\n    <GeneratedForm\n      layout={layout}\n      inputs={inputs}\n      customStyle={customStyle}\n      fields={fields}\n      onSubmit={onSubmit}\n    />\n  )\n}\n\nexport default Form\n","import React from 'react'\n\nimport Form from 'json-to-react-form'\nimport 'json-to-react-form/dist/index.css';\nimport loginInputs from './login.json';\n\nconst App = () => {\n  return <Form layout={[1,7]} inputs={loginInputs} onSubmit={console.log}/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}