{"version":3,"sources":["../../src/components/Flex.tsx","../../src/helpers.tsx","../../src/components/Text.tsx","../../src/components/formComponents/Title.tsx","../../src/components/form/FormInput.tsx","../../src/components/form/FormLayout.tsx","../../src/components/formComponents/SelectInput.tsx","../../src/components/formComponents/TextInput.tsx","../../src/components/HtmlParser.tsx","../../src/components/formComponents/Checkbox.tsx","../../src/components/formComponents/Button.tsx","../../src/components/formComponents/TextArea.tsx","../../src/style.tsx","../../src/components/form/Form.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Flex","getTransformedValidation","validation","transformedValidation","pattern","value","RegExp","sameAs","validate","getValues","Text","Title","children","React","TitleText","FormInput","input","form","onButtonClick","onInputChange","customStyle","isSubmitLoading","register","type","disabled","component","placeholder","hidden","title","options","defaultValue","componentProps","customProps","inputName","getComponentProps","inputProps","onChange","e","buttonProps","isLoading","onClick","display","flex","selectedValue","o","item","getSelectDefaultValue","name","rules","control","render","field","formProps","renderComponent","layout","label","labelStyle","unit","labelPosition","mb","flexDirection","position","getFlexDirectionForLabelPosition","alignItems","justifyContent","mr","ml","css","textAlign","Error","StyledInput","error","darken","ShowPasswordButton","Icon","HtmlParser","html","safeHtml","sanitizeHtml","dangerouslySetInnerHTML","__html","Checkmark","Label","StyledButton","StyledTextArea","style","mapFormInput","TextInput","useState","isPasswordVisible","setPasswordVisible","Boolean","SelectInput","customStyles","container","menu","zIndex","border","borderWidth","borderStype","borderColor","state","boxShadow","option","backgroundColor","lighten","inputBackgroundColor","styles","Checkbox","Button","TextArea","alignSelf","height","rows","inputs","onSubmit","layoutComponent","components","desktopBreakpoint","formName","fields","_form","useForm","mode","watch","handleSubmit","correctStyle","borderRadius","errorColor","labelColor","buttonBackgroundColor","buttonBorderColor","buttonTextColor","inputBorderColor","checkboxActiveColor","getInputPropsForRepeatableForm","formField","watchers","Layout","props","renderInput","renderChildren","i1","i2","key","index","sortedInputs","i","theme","breakpoints","space","id","App","basicValidationInputs","console","log","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.12d7cc4b.chunk.js","sourcesContent":["import styled from '@emotion/styled'\nimport { typography, space, color, flexbox, TypographyProps, SpaceProps, FlexboxProps, LayoutProps, layout, PositionProps, position } from 'styled-system'\n\nexport type CustomFlexProps =\n TypographyProps &\n FlexboxProps &\n LayoutProps &\n PositionProps &\n SpaceProps;\n\ninterface Props extends CustomFlexProps {\n  row?: boolean;\n}\n\nconst Flex = styled('div')<Props>`\n  display: flex;\n  ${flexbox};\n  ${typography};\n  ${space};\n  ${color};\n  ${layout};\n  ${position};\n`;\n\nexport default Flex;","import { ValidationValueMessage } from \"react-hook-form\";\nimport { Validation, Validations } from \"./types\";\n\nexport const getTransformedValidation = (\n  getValues: (field: string) => string,\n  validation?: Validations,\n) => {\n  if (validation == null) {\n    return {};\n  }\n\n  let transformedValidation = {\n    ...validation,\n    pattern: validation.pattern && {\n      ...validation.pattern,\n      value: new RegExp(\n        (validation.pattern as ValidationValueMessage).value as string,\n        \"i\"\n      ),\n    },\n  };\n\n  if (validation.validate && validation.validate.sameAs) {\n    const sameAs = validation.validate.sameAs;\n    transformedValidation = {\n      ...transformedValidation,\n      validate: {\n        sameAs: (value: string) =>\n          getValues((sameAs as Validation).value) === value || (sameAs as Validation).message,\n      },\n    };\n  }\n  return transformedValidation;\n};\n","import {\n    space,\n    color,\n    lineHeight,\n    fontSize,\n    textAlign,\n    fontWeight,\n    SpaceProps,\n    FontSizeProps,\n    FontWeightProps,\n    TextAlignProps,\n    ColorProps,\n    LineHeightProps,\n  } from 'styled-system';\n  import styled from '@emotion/styled';\n\n  export type TextProps = SpaceProps &\n    LineHeightProps &\n    ColorProps &\n    FontSizeProps &\n    TextAlignProps &\n    FontWeightProps;\n\n  const Text = styled('span')<TextProps>`\n    ${space};\n    ${color};\n    ${lineHeight};\n    ${fontSize};\n    ${fontWeight};\n    ${textAlign};\n  `;\n\n  Text.displayName = 'Text';\n\n  export default Text;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Text from '../Text';\n\nconst Title = ({ children }: { children?: React.ReactNode }) => {\n    return(\n        <TitleText>\n            {children}\n        </TitleText>\n    )\n};\n\nexport default Title;\n\nconst TitleText = styled(Text)`\n    font-size: 1.5rem;\n    font-weight: 700;\n`;","import React, { ChangeEvent } from 'react'\nimport { Controller, FieldValues, UseFormReturn } from 'react-hook-form'\nimport { getTransformedValidation } from '../../helpers'\nimport { CustomStyle, Item, InputProps, GroupOption, Option } from '../../types'\nimport Flex from '../Flex'\nimport Title from '../formComponents/Title'\n\ninterface Props {\n  children: any\n  onInputChange?: (value: any, name: string) => void\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  input: Item\n  form: UseFormReturn<FieldValues>\n  customStyle: CustomStyle\n  isSubmitLoading?: boolean\n}\n\nconst FormInput = ({\n  children,\n  input,\n  form,\n  onButtonClick,\n  onInputChange,\n  customStyle,\n  isSubmitLoading\n}: Props) => {\n  const { register, getValues } = form\n  const {\n    type,\n    disabled,\n    component,\n    validation,\n    placeholder,\n    hidden,\n    title,\n    options,\n    defaultValue,\n    componentProps,\n    customProps\n  } = input\n\n  const inputName = input.name as string\n\n  const getComponentProps = () => {\n    let inputProps: InputProps | {} = {};\n\n    // Button can't be registred\n    if(component !== 'Button'){\n      const input = register(inputName, getTransformedValidation(getValues, validation))\n      inputProps = {\n        placeholder,\n        type,\n        disabled: disabled === 'true',\n        defaultValue,\n        ...input,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => {\n          onInputChange?.(e.target.value, inputName);\n          input.onChange(e);\n        }\n      }\n    }\n\n    switch (component) {\n      case 'Button': {\n        return {\n          buttonProps: {\n            type: type as 'submit' | 'button' | 'reset',\n            disabled: disabled === 'true' || isSubmitLoading,\n            title: title || '',\n            isLoading: isSubmitLoading,\n            onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>\n              onButtonClick?.(e, inputName)\n          }\n        }\n      }\n      case 'TextInput': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) =>\n              onInputChange?.(e.target.value, inputName)\n          }\n        }\n      }\n      case 'TextArea': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: (e: ChangeEvent<HTMLTextAreaElement>) =>\n              onInputChange?.(e.target.value, inputName)\n          }\n        }\n      }\n      case 'Checkbox': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: (e: ChangeEvent<HTMLInputElement>) =>\n              onInputChange?.(e.target.checked, inputName)\n          }\n        }\n      }\n      case 'SelectInput': {\n        return {\n          inputProps: {\n            ...inputProps,\n            onChange: ({ value }: Option) => onInputChange?.(value, inputName),\n            options\n          }\n        }\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  const getSelectDefaultValue = () => {\n    let selectedValue: Option | null | undefined = null\n    if (options?.length && defaultValue) {\n      // if it's grouped options\n      if ((options[0] as GroupOption).options) {\n        ;(options as GroupOption[]).map((o) => {\n          o.options.map((item) => {\n            if (item.value === defaultValue) {\n              selectedValue = item\n            }\n          })\n        })\n      } else {\n        selectedValue = (options as Option[]).find(\n          (o: Option) => o.value === defaultValue\n        )\n      }\n    }\n    return selectedValue\n  }\n\n  const renderComponent = () => {\n    switch (component) {\n      case 'Title': {\n        return <Title>{title}</Title>\n      }\n      case 'SelectInput': {\n        const defaultValue = getSelectDefaultValue()\n        return (\n          <Controller\n            name={inputName}\n            rules={getTransformedValidation(getValues, validation)}\n            defaultValue={defaultValue}\n            control={form.control}\n            render={({ field }) =>\n              React.cloneElement(children, {\n                ...componentProps,\n                formProps: {\n                  inputProps: {\n                    defaultValue,\n                    ...getComponentProps().inputProps,\n                    ...field\n                  },\n                  form,\n                  customStyle,\n                  customProps\n                }\n              })\n            }\n          />\n        )\n      }\n      default: {\n        return React.cloneElement(children, {\n          ...componentProps,\n          formProps: {\n            form,\n            customStyle,\n            ...getComponentProps(),\n            customProps\n          }\n        })\n      }\n    }\n  }\n\n  return (\n    <Flex display={hidden ? 'none' : 'flex'} flex={1}>\n      {renderComponent()}\n    </Flex>\n  )\n}\n\nexport default FormInput\n","import { Theme } from '@emotion/react'\nimport { Interpolation } from '@emotion/styled'\nimport React from 'react'\nimport { LabelPosition } from '../../types'\nimport Flex from '../Flex'\nimport Text from '../Text'\n\nexport interface LayoutProps {\n  layout: [number, number]\n  children: React.ReactNode\n  label?: string\n  labelPosition?: LabelPosition\n  labelStyle?: Interpolation<Theme>\n  unit?: string\n}\n\nconst FormLayout = ({\n  layout,\n  children,\n  label,\n  labelStyle,\n  unit,\n  labelPosition = 'left'\n}: LayoutProps) => {\n\n  const getFlexDirectionForLabelPosition = (position?: LabelPosition): any => {\n    switch (position) {\n      case 'top':\n        return 'column'\n      case 'bottom':\n        return 'column-reverse'\n      case 'right':\n        return 'row-reverse'\n      default:\n        return ['column', 'row']\n    }\n  }\n\n  return (\n    <Flex\n      flex={1}\n      mb={4}\n      flexDirection={getFlexDirectionForLabelPosition(labelPosition)}\n      alignItems='center'\n    >\n      <Flex\n        flex={layout[0]}\n        justifyContent={labelPosition === 'left' ? 'flex-end' : 'flex-start'}\n        mr={labelPosition === 'left' ? 3 : 0}\n        ml={labelPosition === 'right' ? 3 : 0}\n      >\n        {!!label && <Text css={labelStyle} textAlign=\"end\">{label}</Text>}\n      </Flex>\n      <Flex flex={layout[1]}>\n        {children}\n        {unit && <Text css={labelStyle}>{unit}</Text>}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default React.memo(FormLayout)\n","import styled from '@emotion/styled'\nimport { darken, lighten } from 'polished'\nimport React from 'react'\nimport Select, { GroupTypeBase, Styles } from 'react-select'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport Flex from '../Flex'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst SelectInput = ({ formProps }: Props) => {\n  const { inputProps, customStyle, form } = formProps\n  const error = form.formState.errors[inputProps.name]\n  const customStyles:\n    | Partial<Styles<any, false, GroupTypeBase<any>>>\n    | undefined = {\n    container: (provided) => ({\n      ...provided,\n      flex: 1\n    }),\n    menu: (provided) => ({\n      ...provided,\n      zIndex: 2,\n      border: `1px solid ${darken(0.1, customStyle.inputBorderColor as string)}`\n    }),\n    control: (provided, state) => ({\n      ...provided,\n      borderWidth: 1,\n      borderStype: 'solid',\n      borderColor: error\n        ? customStyle.errorColor\n        : state.isFocused\n        ? darken(0.1, customStyle.inputBorderColor as string)\n        : customStyle.inputBorderColor,\n      boxShadow: 'none',\n      '&:hover': {\n        boxShadow: 'none',\n        borderColor: error\n          ? customStyle.errorColor\n          : darken(0.1, customStyle.inputBorderColor as string)\n      }\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      backgroundColor: state.isSelected\n        ? customStyle.buttonBackgroundColor\n        : state.isFocused\n        ? lighten(0.6, customStyle.buttonBackgroundColor as string)\n        : customStyle.inputBackgroundColor\n    })\n  }\n\n  return (\n    <Flex flex={1} position='relative'>\n      <Select {...inputProps} styles={customStyles} />\n      {error && (\n        <React.Fragment>\n          <Error customStyle={customStyle}>{error.message}</Error>\n        </React.Fragment>\n      )}\n    </Flex>\n  )\n}\n\nexport default SelectInput\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  bottom: -14px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n","import styled from '@emotion/styled'\nimport React, { useState } from 'react'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport { ReactComponent as ErrorSVG } from '../../icons/error.svg'\nimport { ReactComponent as ShowSVG } from '../../icons/eye.svg'\nimport Flex from '../Flex'\nimport { css } from '@emotion/react'\nimport { darken } from 'polished'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst TextInput = ({ formProps }: Props) => {\n  const [isPasswordVisible, setPasswordVisible] = useState(false)\n  const { inputProps, form, customStyle } = formProps\n  const { type, name } = inputProps\n  const error = form.formState.errors[name];\n  return (\n    <Flex flex={1} position='relative'>\n      <StyledInput\n        {...inputProps}\n        customStyle={customStyle}\n        css={css`\n          padding-right: ${type === 'password' ? 5 : 0};\n        `}\n        type={\n          type === 'password' ? (isPasswordVisible ? 'text' : 'password') : type\n        }\n        error={Boolean(error)}\n      />\n      {type === 'password' && (\n        <ShowPasswordButton\n          customStyle={customStyle}\n          type='button'\n          onClick={() => setPasswordVisible((prevState) => !prevState)}\n        >\n          <ShowSVG />\n        </ShowPasswordButton>\n      )}\n      {error && (\n        <React.Fragment>\n          <Icon>\n            <ErrorSVG />\n          </Icon>\n          <Error customStyle={customStyle}>{error.message}</Error>\n        </React.Fragment>\n      )}\n    </Flex>\n  )\n}\n\nexport default TextInput\n\nconst StyledInput = styled.input<{ error: boolean; customStyle: CustomStyle }>`\n  padding: 10.5px 14px;\n  width: 100%;\n  border-width: 1px;\n  border-style: solid;\n  border-color: ${({ error, customStyle }) =>\n    error ? customStyle.errorColor : customStyle.inputBorderColor};\n\n  &:hover {\n    border-color: ${({ error, customStyle }) =>\n      error\n        ? customStyle.errorColor\n        : darken(0.1, customStyle.inputBorderColor as string)};\n\n  }\n\n  &:focus {\n    border-color: ${({ customStyle }) => darken(0.1, customStyle.inputBorderColor as string)};\n  }\n\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  background-color: ${({ customStyle }) => customStyle.inputBackgroundColor};\n  outline: none;\n`\n\nconst ShowPasswordButton = styled.button<{ customStyle: CustomStyle }>`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  border: none;\n\n  svg {\n    width: 20px;\n    height: 20px;\n    fill: ${({ customStyle }) => darken(0.5, customStyle.inputBorderColor as string)};\n  }\n`\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  bottom: -14px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n\nconst Icon = styled.div`\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n`\n","import React from 'react';\nimport sanitizeHtml from 'sanitize-html';\n\nexport const prepositions = (value: string) => {\n    return value\n      ? value.replace(\n          /(\\s|^)(a|i|k|o|s|u|v|z)(\\s(a|i|k|o|s|u|v|z))?(\\s+)/gim,\n          '$1$2$3\\u00A0',\n        )\n      : '';\n  };\n\ninterface Props {\n  html: string | null;\n}\n\nconst HtmlParser = ({ html }: Props) => {\n  if (html == null) {\n    return null;\n  }\n  const safeHtml = sanitizeHtml(prepositions(html));\n  return <div dangerouslySetInnerHTML={{ __html: safeHtml }} />;\n};\n\nexport default HtmlParser;\n","import styled from '@emotion/styled'\nimport { darken } from 'polished'\nimport React from 'react'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport HtmlParser from '../HtmlParser'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst Checkbox = ({ formProps }: Props) => {\n  const { inputProps, form, customStyle } = formProps\n  const { label, name } = inputProps\n\n  const error = form.formState.errors[name];\n  return (\n    <Label customStyle={customStyle}>\n      {label != null && <HtmlParser html={label} />}\n      <input {...inputProps} type='checkbox' />\n      <Checkmark error={Boolean(error)} customStyle={customStyle} />\n      {error && <Error customStyle={customStyle}>{error.message}</Error>}\n    </Label>\n  )\n}\n\nexport default Checkbox\n\nconst Checkmark = styled.span<{ customStyle: CustomStyle; error: boolean }>`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  width: 1.25rem;\n  height: 1.25rem;\n  border: ${({ error, customStyle }) =>\n    `1px solid ${\n      error ? customStyle.errorColor : customStyle.inputBorderColor\n    }`};\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  background-color: ${({ customStyle }) => customStyle.inputBackgroundColor};\n  transform: translate(0, -50%);\n\n  &:hover {\n    border: ${({ error, customStyle }) =>\n    `1px solid ${\n      error ? customStyle.errorColor : darken(0.1, customStyle.inputBorderColor as string)\n    }`};\n  }\n\n  ::after {\n    content: '';\n    position: absolute;\n    display: none;\n  }\n`\n\nconst Label = styled.label<{ customStyle: CustomStyle }>`\n  position: relative;\n  display: block;\n  padding-left: 2rem;\n  font-size: 1rem;\n  cursor: pointer;\n  user-select: none;\n\n  input {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n    cursor: pointer;\n  }\n\n  input:checked ~ ${Checkmark} {\n    border: none;\n    background-color: ${({ customStyle }) =>\n      customStyle.checkboxActiveColor};\n  }\n\n  ${Checkmark} {\n    ::after {\n      top: 0.25rem;\n      left: 33%;\n      width: 0.25rem;\n      height: 0.5rem;\n      border: solid white;\n      border-width: 0 0.125rem 0.125rem 0;\n      transform: rotate(45deg);\n    }\n  }\n\n  input:checked ~ ${Checkmark} {\n    ::after {\n      display: block;\n    }\n  }\n`\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  top: 42px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n","import styled from \"@emotion/styled\";\nimport { darken } from \"polished\";\nimport React from \"react\";\nimport { ButtonFormProps, CustomStyle } from \"../../types\";\nimport Text from \"../Text\";\n\ninterface Props {\n  formProps: ButtonFormProps;\n}\n\nconst Button = ({ formProps }: Props) => {\n  const { buttonProps, customStyle } = formProps;\n  const { title } = buttonProps;\n  return (\n    <StyledButton customStyle={customStyle} {...buttonProps}>\n      <Text>{title}</Text>\n    </StyledButton>\n  );\n};\n\nexport default Button;\n\nconst StyledButton = styled.button<{ customStyle: CustomStyle }>`\n  display: flex;\n  width: 100%;\n  padding: 1rem 2rem;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-size: 1rem;\n  text-align: center;\n  border-style: solid;\n  border-width: 1px;\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  border-color: ${({ customStyle }) => customStyle.buttonBorderColor};\n  background-color: ${({ customStyle }) => customStyle.buttonBackgroundColor};\n  color: ${({ customStyle }) => customStyle.buttonTextColor};\n\n  &:hover {\n    background-color: ${({ customStyle }) => darken(0.1, customStyle.buttonBackgroundColor as string)};\n  }\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled'\nimport { darken } from 'polished'\nimport React from 'react'\nimport { CustomStyle, InputFormProps } from '../../types'\nimport Flex from '../Flex'\n\ninterface Props {\n  formProps: InputFormProps\n}\n\nconst TextArea = ({ formProps }: Props) => {\n  const rows = 5\n  const { inputProps, form, customStyle } = formProps\n  const error = form.formState.errors[inputProps.name];\n  return (\n    <Flex flex={1} alignSelf='stretch' position='relative'>\n      <StyledTextArea\n        style={{ height: `${rows * 30}px` }}\n        rows={rows}\n        customStyle={customStyle}\n        {...inputProps}\n        error={!!error}\n      />\n      {error && <Error customStyle={customStyle}>{error.message}</Error>}\n    </Flex>\n  )\n}\n\nexport default TextArea\n\nconst StyledTextArea = styled.textarea<{\n  error: boolean\n  customStyle: CustomStyle\n}>`\n  width: 100%;\n  height: 2.5rem;\n  padding: 1rem;\n  line-height: 1.5rem;\n  border: 1px solid\n    ${({ error, customStyle }) =>\n      error ? customStyle.errorColor : customStyle.inputBorderColor};\n\n  &:focus {\n    border-color: ${({ customStyle }) => darken(0.1, customStyle.inputBorderColor as string)};\n  }\n\n  &:hover {\n    border-color: ${({ error, customStyle }) =>\n      error\n        ? customStyle.errorColor\n        : darken(0.1, customStyle.inputBorderColor as string)};\n  }\n  border-radius: ${({ customStyle }) => customStyle.borderRadius};\n  background-color: ${({ customStyle }) => customStyle.inputBackgroundColor};\n  outline: none;\n\n  &::placeholder {\n    font-size: 1rem;\n  }\n`\n\nconst Error = styled.span<{ customStyle: CustomStyle }>`\n  position: absolute;\n  bottom: -16px;\n  left: 0;\n  font-size: 0.7rem;\n  color: ${({ customStyle }) => customStyle.errorColor};\n`\n","const style = {\n    borderRadius: \"0.25rem\",\n    errorColor: \"#E73C45\",\n    labelColor: \"#000000\",\n\n    // buton\n    buttonBackgroundColor: \"#033196\",\n    buttonBorderColor: \"transparent\",\n    buttonTextColor: \"#ffffff\",\n\n    // input\n    inputBorderColor: \"#e1e5ed\",\n    inputBackgroundColor: \"#ffffff\",\n    checkboxActiveColor: \"#E73C45\"\n};\n\nexport default style;","import { ThemeProvider } from '@emotion/react'\nimport React, { FunctionComponent } from 'react'\nimport { FieldValues, useForm, UseFormReturn } from 'react-hook-form'\nimport {\n  ButtonFormProps,\n  CustomStyle,\n  Input,\n  InputFormProps,\n  Item\n} from '../../types'\nimport Flex from '../Flex'\nimport FormInput from './FormInput'\nimport FormLayout, { LayoutProps } from './FormLayout'\nimport SelectInput from '../formComponents/SelectInput'\nimport TextInput from '../formComponents/TextInput'\nimport Checkbox from '../formComponents/Checkbox'\nimport Button from '../formComponents/Button'\nimport TextArea from '../formComponents/TextArea'\nimport Title from '../formComponents/Title'\nimport style from '../../style'\n\nconst mapFormInput = {\n  TextInput,\n  SelectInput,\n  Checkbox,\n  Button,\n  TextArea,\n  Title\n}\n\ninterface Props {\n  onSubmit?: (values: any) => void\n  inputs: Item[] | null\n  layout?: [number, number]\n  form?: UseFormReturn<FieldValues>\n  onButtonClick?: (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string\n  ) => void\n  onInputChange?: (checked: boolean | number | string, name: string) => void\n  validationMode?: 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched' | 'all'\n  layoutComponent?: FunctionComponent<any>\n  components?: {\n    TextInput?: FunctionComponent<InputFormProps>\n    SelectInput?: FunctionComponent<InputFormProps>\n    Checkbox?: FunctionComponent<InputFormProps>\n    Button?: FunctionComponent<ButtonFormProps>\n    TextArea?: FunctionComponent<InputFormProps>\n    Title?: FunctionComponent<{ children: React.ReactNode }>\n  }\n  desktopBreakpoint?: number\n  customStyle?: CustomStyle\n\n  // neccessary repetable form\n  fields?: Record<'id', string>[]\n  formName?: string\n}\n\nconst Form = ({\n  inputs,\n  onSubmit,\n  layout = [3, 7],\n  form,\n  onInputChange,\n  onButtonClick,\n  layoutComponent,\n  components = {},\n  customStyle,\n  desktopBreakpoint,\n  formName,\n  fields\n}: Props) => {\n  const _form = form || useForm({ mode: 'onBlur' })\n  const { watch, handleSubmit } = _form\n\n  const correctStyle: CustomStyle = {\n    borderRadius: customStyle?.borderRadius || style.borderRadius,\n    errorColor: customStyle?.errorColor || style.errorColor,\n    labelColor: customStyle?.labelColor || style.labelColor,\n    buttonBackgroundColor:\n      customStyle?.buttonBackgroundColor || style.buttonBackgroundColor,\n    buttonBorderColor:\n      customStyle?.buttonBorderColor || style.buttonBorderColor,\n    buttonTextColor: customStyle?.buttonTextColor || style.buttonTextColor,\n    inputBorderColor: customStyle?.inputBorderColor || style.inputBorderColor,\n    inputBackgroundColor:\n      customStyle?.inputBackgroundColor || style.inputBackgroundColor,\n    checkboxActiveColor:\n      customStyle?.checkboxActiveColor || style.checkboxActiveColor,\n  }\n\n  const getInputPropsForRepeatableForm = (\n    name: string,\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    // if it's not repeatableForm\n    if (!formField) {\n      return {}\n    }\n    return {\n      name: `${formName}.${formIndex}.${name}`,\n      defaultValue: (formField as any).value\n    }\n  }\n\n  if (inputs == null) {\n    return null\n  }\n\n  const watchers: { [key: string]: any } = {}\n\n  const Layout = (props: LayoutProps) =>\n    layoutComponent ? (\n      React.createElement(layoutComponent, { ...props })\n    ) : (\n      <FormLayout {...props} />\n    )\n\n  // IT SETS WATCHERS FOR CONDITINAL RENDER\n  inputs.map((input) => {\n    if (input.conditionalChildrenRender && input.name) {\n      watchers[input.name] = watch(input.name)\n    }\n  })\n\n  const renderInput = (\n    input: Item,\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    const component = input.component\n      ? components[input.component] || mapFormInput[input.component]\n      : null\n    return (\n      <Layout layout={layout} label={input.label} unit={input.unit}>\n        <FormInput\n          onInputChange={onInputChange}\n          onButtonClick={onButtonClick}\n          input={{\n            ...input,\n            ...getInputPropsForRepeatableForm(\n              input.name as string,\n              formIndex,\n              formField\n            )\n          }}\n          form={_form}\n          customStyle={correctStyle}\n        >\n          {component\n            ? React.createElement(\n                component as React.FunctionComponent<\n                  InputFormProps | ButtonFormProps\n                >\n              )\n            : ''}\n        </FormInput>\n      </Layout>\n    )\n  }\n\n  const renderChildren = (\n    inputs: Item[],\n    formIndex: number,\n    formField?: Record<'id', string>\n  ) => {\n    const sortedInputs = inputs.sort(\n      (i1, i2) => (i1.order || 0) - (i2.order || 0)\n    )\n    return sortedInputs.map((item, index) => {\n      // FOR CONDITIONAL RENDER\n      if (item.children && item.conditionalChildrenRender) {\n        return (\n          <React.Fragment key={`${item.name}${item.label}_${index}`}>\n            {renderInput(item as Input, formIndex, formField)}\n            {watchers[(item as Input).name]\n              ? renderChildren(item.children, formIndex, formField)\n              : null}\n          </React.Fragment>\n        )\n      }\n\n      // FOR DIV WRAPPERS WITH INNER CHILDRENS\n      if (item.children) {\n        const sortedInputs = item.children.sort(\n          (i1, i2) => (i1.order || 0) - (i2.order || 0)\n        )\n        return (\n          <Flex\n            flexDirection={['column', 'row']}\n            alignItems='center'\n            key={`form-${index}`}\n            justifyContent={item.align || 'space-between'}\n          >\n            {sortedInputs.map((i, index) => (\n              <Flex\n                mr={[0, index < sortedInputs.length - 1 ? 4 : 0]}\n                mb={[index < sortedInputs.length - 1 ? 3 : 0, 0]}\n                key={`form-child-${i.name}${i.label}`}\n              >\n                {renderChildren([i], formIndex, formField)}\n              </Flex>\n            ))}\n          </Flex>\n        )\n      }\n\n      // RENDER CASUAL INPUT WITHOUT CHILDRENS\n      return renderInput(item as Input, formIndex, formField)\n    })\n  }\n\n  return (\n    <ThemeProvider\n      theme={{\n        breakpoints: [0, desktopBreakpoint || '52em'],\n        space: [0, 4, 8, 16, 24, 32]\n      }}\n    >\n      <Flex flexDirection='column' flex={1}>\n        <form onSubmit={onSubmit && handleSubmit(onSubmit)}>\n          {fields\n            ? fields.map((formField, index) => (\n                <div key={formField.id}>\n                  {renderChildren(inputs, index, formField)}\n                </div>\n              ))\n            : renderChildren(inputs, 0)}\n        </form>\n      </Flex>\n    </ThemeProvider>\n  )\n}\n\nexport default React.memo(Form)\n","import * as React from 'react'\nimport GeneratedForm from './components/form/Form'\nimport { CustomStyle, Item } from './types'\n\nexport { InputFormProps, ButtonFormProps } from './types'\nexport { LayoutProps } from './components/form/FormLayout'\n\ninterface Props {\n  layout?: [number, number]\n  inputs: Item[]\n  customStyle?: CustomStyle\n  fields?: Record<\"id\", string>[]\n  onSubmit?: (value: any) => void\n}\n\nconst Form = ({ layout = [3, 7], inputs, customStyle, fields, onSubmit }: Props) => {\n  return (\n    <GeneratedForm\n      layout={layout}\n      inputs={inputs}\n      customStyle={customStyle}\n      fields={fields}\n      onSubmit={onSubmit}\n    />\n  )\n}\n\nexport default Form\n","import React from 'react'\n\nimport Form from 'json-to-react-form'\nimport basicValidationInputs from './forms/basicValidationForm.json';\n\nconst App = () => {\n  return <Form layout={[1,7]} inputs={basicValidationInputs} onSubmit={console.log}/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}